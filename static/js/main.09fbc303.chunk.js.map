{"version":3,"sources":["Table.js","Form.js","App.js","index.js"],"names":["TableHeader","TableBody","props","rows","characterData","map","row","index","key","name","job","onClick","removeCharacter","Table","this","Component","Form","handleChange","event","target","value","setState","submitForm","handleSubmit","state","initialState","type","onChange","App","characters","character","filter","i","className","ReactDOM","render","document","getElementById"],"mappings":"2PAEMA,EAAc,WAChB,OACI,+BACI,0CACA,sEACA,4BACI,oCACA,mCACA,yCAMVC,EAAY,SAAAC,GACd,IAAMC,EAAOD,EAAME,cAAcC,KAAI,SAACC,EAAKC,GACvC,OACI,wBAAIC,IAAKD,GACL,4BAAKD,EAAIG,MACT,4BAAKH,EAAII,KACT,4BACI,4BAAQC,QAAS,kBAAMT,EAAMU,gBAAgBL,KAA7C,eAKhB,OAAO,+BAAQJ,IAGEU,E,iLACP,IAAD,EACsCC,KAAKZ,MAAxCE,EADH,EACGA,cAAeQ,EADlB,EACkBA,gBAEvB,OACI,+BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWR,cAAeA,EAAeQ,gBAAiBA,S,GAPvCG,a,OC7BdC,E,YACjB,WAAYd,GAAQ,IAAD,8BACf,4CAAMA,KAUVe,aAAe,SAAAC,GAAU,IAAD,EACIA,EAAMC,OAAtBV,EADY,EACZA,KAAMW,EADM,EACNA,MAEd,EAAKC,SAAL,eACKZ,EAAOW,KAfG,EAmBnBE,WAAa,WACT,EAAKpB,MAAMqB,aAAa,EAAKC,OAC7B,EAAKH,SAAS,EAAKI,eAlBnB,EAAKA,aAAe,CACfhB,KAAM,GACNC,IAAK,IAGV,EAAKc,MAAQ,EAAKC,aARH,E,sEAwBT,IAAD,EACiBX,KAAKU,MAAnBf,EADH,EACGA,KAAMC,EADT,EACSA,IAEd,OACI,8BACI,uCACA,2BACIgB,KAAK,OACLjB,KAAK,OACLW,MAAOX,EACPkB,SAAUb,KAAKG,eACnB,sCACA,2BACIS,KAAK,OACLjB,KAAK,MACLW,MAAOV,EACPiB,SAAUb,KAAKG,eACnB,2BACIS,KAAK,SACLN,MAAM,SACNT,QAASG,KAAKQ,kB,GA7CAP,aCEba,E,2MACjBJ,MAAQ,CACJK,WAAY,I,EAGhBN,aAAe,SAAAO,GACX,EAAKT,SAAS,CAAEQ,WAAW,GAAD,mBAAM,EAAKL,MAAMK,YAAjB,CAA6BC,O,EAG3DlB,gBAAkB,SAAAL,GAAU,IAChBsB,EAAe,EAAKL,MAApBK,WAER,EAAKR,SAAU,CACXQ,WAAYA,EAAWE,QAAO,SAACD,EAAWE,GACtC,OAAOA,IAAMzB,Q,wEAKf,IACEsB,EAAef,KAAKU,MAApBK,WAER,OACI,yBAAKI,UAAU,aACX,kBAAC,EAAD,CAAO7B,cAAeyB,EAAYjB,gBAAiBE,KAAKF,kBACxD,kBAAC,EAAD,CAAMW,aAAcT,KAAKS,oB,GAzBRR,a,MCCjCmB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.09fbc303.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nconst TableHeader = () => {\n    return (\n        <thead>\n            <h3>React List</h3>\n            <p>Add and remove person(s) from this list</p>\n            <tr>\n                <th>Name</th>\n                <th>Job</th>\n                <th>Remove</th>\n            </tr>\n        </thead>\n    )\n}\n\nconst TableBody = props => {\n    const rows = props.characterData.map((row, index) => {\n        return (\n            <tr key={index}>\n                <td>{row.name}</td>\n                <td>{row.job}</td>\n                <td>\n                    <button onClick={() => props.removeCharacter(index)}>Delete</button>\n                </td>\n            </tr>\n        )\n    })\n    return <tbody>{rows}</tbody>  \n}\n\nexport default class Table extends Component {\n    render() {\n        const { characterData, removeCharacter } = this.props\n\n        return (\n            <table>\n                <TableHeader />\n                <TableBody characterData={characterData} removeCharacter={removeCharacter} />\n            </table>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class Form extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.initialState = {\n             name: '',\n             job: '',\n        }\n\n        this.state = this.initialState\n    }  \n    \n    handleChange = event => {\n        const { name, value } = event.target\n    \n        this.setState({\n            [name]: value,\n        })\n    }\n\n    submitForm = () => {\n        this.props.handleSubmit(this.state)\n        this.setState(this.initialState)\n    }\n    \n    render() {\n        const { name, job } = this.state;\n    \n        return (\n            <form>\n                <label>Name</label>\n                <input \n                    type=\"text\"\n                    name=\"name\"\n                    value={name} \n                    onChange={this.handleChange} />\n                <label>Job</label>\n                <input \n                    type=\"text\" \n                    name=\"job\"\n                    value={job}\n                    onChange={this.handleChange} />\n                <input \n                    type=\"button\" \n                    value=\"Submit\"\n                    onClick={this.submitForm} />\n            </form>\n        );\n    }\n}\n\n","import React, { Component } from 'react'\nimport Table from './Table';\nimport Form from './Form';\n\nexport default class App extends Component {\n    state = {\n        characters: [],\n    }\n\n    handleSubmit = character => {\n        this.setState({ characters: [...this.state.characters, character] })\n    }\n\n    removeCharacter = index => {\n        const { characters } = this.state\n        \n        this.setState ({\n            characters: characters.filter((character, i) => {\n                return i !== index\n            }),\n        })\n    }\n\n    render() {\n        const { characters } = this.state\n\n        return (\n            <div className=\"container\">\n                <Table characterData={characters} removeCharacter={this.removeCharacter} />\n                <Form handleSubmit={this.handleSubmit} />\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}